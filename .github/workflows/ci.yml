name: Continuous Integration

on: [push, pull_request]

jobs:
  build-and-formatting:
    name: Build and check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: cargo build --verbose
      # rustfmt will check if the code build before checking the formatting.
      # Because the build script generated a new module in the code,
      # building the code before checking it is needed.
    - name: Check formatting
      run: cargo fmt --all -- --check

  linting:
    name: Execute clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: cargo clippy

  unit-test:
    name: Run unit and doc tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: cargo test --lib --verbose
    - run: cargo test --doc --verbose

  integ-test-normal:
    name: Normal integration tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: cargo build --verbose
    - run: |
        RUST_BACKTRACE=1 RUST_LOG=info cargo run &
        cargo test --test normal

  integ-test-persistence:
    name: Persistence integration tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: cargo build --verbose
    - name: Tests executed before the shutdown
      run: |
        RUST_BACKTRACE=1 RUST_LOG=info cargo run &
        SERVER_PID=$!
        cargo test --test persistent-before
        kill $SERVER_PID
    # Create a fake mapping file for the root application, the Mbed Provider and
    # a key name of "Test Key". It contains a valid PSA Key ID.
    # It is tested in test "should_have_been_deleted".
    - name: Create a fake mapping file
      run: |
        mkdir -p mappings/cm9vdA==/1 || exit 1
        printf '\xe0\x19\xb2\x5c' > mappings/cm9vdA==/1/VGVzdCBLZXk\=
    - name: Tests executed after the shutdown
      run: |
        RUST_BACKTRACE=1 RUST_LOG=info cargo run &
        cargo test --test persistent-after

  stress-test:
    name: Stress tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: cargo build --verbose
    - run: |
        RUST_BACKTRACE=1 RUST_LOG=info cargo run &
        cargo test --test stress_test

  cross-testing-arm64-linux:
    name: Cross testing for the aarch64-unknown-linux-gnu target
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Install cross
      run: cargo install cross
    - name: Build the cross Dockerfile
      run: docker build -t parsec-cross tests/
    - name: Cross-compile with cross
      run: cross build --target aarch64-unknown-linux-gnu --verbose
    - name: Execute the unit tests with cross
      run: cross test --lib --target aarch64-unknown-linux-gnu --verbose
