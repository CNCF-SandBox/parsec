
typedef ClientID string
clientID clientId = GetIdentityFromIdentityProvider()
pasl.PaslClient client = new pasl.PaslClient(clientId)

/***
* 1. List existing keys and find a signing one
***/
pasl.PaslKey[] keys = client.ListKeys()
pasl.PaslKey* clientKey = null
for k in keys {
  if (k.Params & pasl.KEYTYPE_SIGNING) { //way better ways to do this depending on language
    clientKey = k
    break
  }
}

/***
* 2. Alternatively create a new key
***/
if null == clientKey {
  keyParams = pasl.TlsKeyDefault //?
  keyParams = pasl.EccDefault

  keyParams =
    KeyParams {
      type: pasl.KEYTYPE_SIGNING
      signParams: SignKeyParams {
        eccParams: EccSignKeyParams {
          CurveID: elliptic.P256()
        }
        hashAlg: crypto.SHA256 // maybe not necessary if hashing is explicitly done as a separate operation (see below)
      }
      encryptParams: EncryptKeyParams {}
    } //leaving this unset will use sane defaults?

  clientKey = client.CreateKey("test_key", keyParams)
}
/***
* 3. Signing operation and verify
***/
string sampleData = "Hello, World!"
digest = crypto.SHA256(sampleData)
signature = clientKey.PaslSign(digest)
assert (true == clientKey.PublicKey.Verify(digest, signature))

/***
* 4. Should play nice with other crypto implementations - ideally someTranslationFunction is as simple as possible
***/
pubEncoded, sigEncoded = someTranslationFunction(clientKey.PublicKey, signature, clientKey.Params)
assert (true == ecdsa.Verify(pubEncoded, digest, sigEncoded.r, sigEncoded.s)

/***
* 5. Optionally (and a better name to be determined), but including the hashing
* in the same operation is less flexible, but commonly done for simpler UX
***/
signature2 = clientKey.HashAndSign(sampleData)
assert (true == clientKey.PublicKey.HashAndVerify(sampleData, signature2))
assert (true == clientKey.PublicKey.Verify(digest, signature2))

/***
* 6. Show explicit verify without private key
***/
keyParams.type = pasl.KEYTYPE_VERIFYING
verifyKey = client.ImportKey("test_key_pub", clientKey.PublicKey, keyParams)
assert (true == verifyKey.Verify(digest, signature))

/***
* In Golang for example, clientKey type would have to implement a
* crypto.Signer interface (including Sign(), which would call PaslSign() above)
*
* In, say wolfSSL or other implementations, registering PaslSign() as a callback
* may be necessary
***/
tlsConfig = new TlsConfig(clientKey, someClientCertificate, someCA, someTlsClientConfig)
